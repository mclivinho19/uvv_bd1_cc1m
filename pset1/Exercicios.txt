Questão 1: O que são sistemas de controles de versões? Por que são importantes?

R: Version Control System, ou sistema de controle de versões, é um software que nos permite controlar todas as alterações em um código fonte ou em demais documentos.

Questão 2: Qual a diferença entre o Git e o GitHub? Como eles estão relacionados? É possível usar um sem o outro?

R: O Github é uma plataforma que pode conter repositórios de código em armazenamento baseado em nuvem, para que vários desenvolvedores possam trabalhar em um único prjeto e ver as edições de cada um deles em tempo real. Já o git, é um software VSC local que permite aos desenvolvedores a salvar snapshots de seus projetos ao longo do tempo.

De certa forma sim, é possivel, já que o github da acesso a troca dos arquivos manualmente pelo site.
Mas é indiscutivel que o git complementa bastante o github e facilita o acesso e a troca de arquivos, como também faz comparações dos arquivos atualizados e seus time-lapse

Questão 3 O Git é um sistema distribuído de controle de versões. O que significa isso?

R: Significa que o git ele evita que alterações realizadas em um projeto modifiquem o código-fonte diretamente. fazendo assim salvamentos secundárior, como se fosse uma árvore.

Questão 4: Existem alguns errinhos no projeto HR ilustrado acima (principalmente
em relação às cardinalidades dos relacionamentos e em relação à obrigatoriedade das
chaves estrangeiras). Identifique quais são esses erros, explique o que está errado e
conserte os erros se for necessário.

R: Está tendo erros em relação as relações [FK], porque quando você faz a passagem de um primary key, ou de uma tabela.. na tabela que ela foi "transferida", os seus valores devem permanecer iguais ao da tabela de referência. Contudo, no HR isso não ocorre, as FK tem seus valores trocados, como por exemplo: o valor "NOT NULL" não está sendo mais incluido no relacionamento.

Questão 5: Alguma tabela do projeto representa um relacionamento do tipo N:N?
Se sim, identifique a tabela e explique porque é um relacionamento N:N; Se não,
explique porque não há relacionamentos N:N neste projeto.

R: Sim por exemplo: entre empregados e cargos. Um cargo pode ter "N" empregados.

Questão 6: Pelo projeto apresentado é possível que um determinado empregado
seja o gerente de zero, um ou mais departamentos. Se eu quisesse impor uma regra
que diz que um empregado só pode ser gerente de, no máximo, um departamento,
o que eu teria que fazer no projeto? O que eu teria que criar no banco de dados para
impor essa restrição? Por quê?

R: Sim, porque ele pode ser ou não gerente de um departamento; Pra fazer essa restrição no empregado e alocar a sua permissão de gerente a um único departamento é necessário definir o gerente como UNIQUE, fazendo com que o gerente possa relacionar a apenas um departamento. Dá pra usar a restrição UNIQUE para garantir que não há valores duplicados inseridos.

Questão 7: Por que os relacionamentos entre as tabelas estão representados com
linhas pontilhadas? O que isso representa? Por que foi representado assim?

R: Essa representação com as linhas pontilhadas entre os relacionamentos, é uma relação de "sem identificação", ela foi representado assim porque a tabela pode existir tendo ou não relacionamento com a outra. Ou seja, as tabelas vão ter relacionamento, mas não é uma relação fixa, onde ela pode alterar ou manter sem.

Questão 8: Qual é o único tipo de relacionamento que pode guardar dados? Por quê? Existe algum relacionamento assim nesse projeto? Se não existir, você sugeriria trocar alguns dos relacionamentos existentes para melhorar o projeto?

R: É uma relação de N pra N, porque nessa relação, criamos uma nova entidade para armazenar informações sobre esse relacionamento. Sim existe, em empregados com os departamentos, os cargos com o seu histórico e regiões com os paises.

Questão 9: Explique o relacionamento da tabela empregados com ela mesma? É um erro? É correto? Por quê?

R: Não é um erro, tem sim como fazer um relacionamento empregado a ele mesmo, mas normalmente não é recomendado.
que é quando você faz com que uma tabela, tenha algum relacionamento com outra. definindo uma relação de árvore, como a primeira sendo o "pai" e a segunda sendo o "filho".

Questão 10: Qual a diferença entre banco de dados, usuário e esquema no PostgreSQL?

R: O banco de dados é o que vai constituir toda a construção do banco, o Schema é a base para a criação das tabelas pro banco de dados onde facilita na criação e prove uma maior segurança, o usuário é o qual vai ter sua permissão autorizada pelo schema e será o ponto principal para a criação e o manuseio dele.

Questão 11: Por que um esquema é importante?

R: O Schema é importante porque são coleções de objetos dentro de um banco de dados, que organizam vários aspectos e são muito importantes para segmentação da segurança, facilitando a admininstração dos objetos e dados.

Questão 12: Se você não definir um esquema específico, onde os objetos do banco
de dados (tabelas, relacionamentos, dados, etc.) serão gravados? Isso é bom ou
ruim? Por que?

R: Se não for definido um Schema específico, os banco de dados e suas tabelas, serão criadas no public. e isso é ruim porque não vai ter nenhuma restrição ou permissão blockeando e mantendo segurança no projeto. Portanto, qualquer usuário poderia fazer alteração naquele banco.

Questão 13: Agora que você já implementou o projeto no PostgreSQL, tem alguma
sugestão de melhoria a fazer para o projeto? Como ele poderia ser melhorado?

R: Não, não tenho nenhuma sugestão de melhoria.

Questão 14: Faça uma comparação dos SGBD que você utilizou. Quais as vantagens e desvantagens de cada um? Quem tem a melhor documentação?

R: Eu acho que o PostgreSQL tem uma maior estrutura, desempenho e segurança, em que possui uma admininstração de dados mais completa. posso usar como exemplo a comparação com MariaDB onde ela tem uma configuração mais simples que o postgress.

Questão 15: Como você acha que foi seu desempenho neste PSet? Como você foi
buscando as informações necessárias e lendo as documentações dos SGBD? Você
aproveitou a oportunidade e buscou ajuda dos monitores?

R: Eu acho que tive um ótimo desempenho, enquanto lia o PDF contendo as introdutórias, tive que ler as documentações dos SGBD pra criação dos bancos, schemas e afins. Não, acabei não buscando ajuda com os monitores.